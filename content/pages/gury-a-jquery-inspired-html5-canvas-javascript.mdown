Date: 2010-10-11 15:46:00 GMT
tumblr_id: 1291711468
categories: github,javascript,canvas,graphics,jquery
github_repo: rsandor/gury
title: gury: A jQuery-inspired chainable JavaScript helper for HTML5 Canvas

# gury: A jQuery-inspired chainable JavaScript helper for HTML5 Canvas

With more and more browser and mobile device support, adoption of the HTML5 `<canvas>` object is accelerating. For developers who are used to working with JavaScript libraries, using the native[ Canvas JavaScript APIs](http://diveintohtml5.org/canvas.html#divingin) might seem a bit cumbersome.

[Ryan Sandor Richards](http://github.com/rsandor) aims to wrap those Canvas APIs in a bit of [jQuery](http://jquery.com)-inspired convenience. [Gury](http://github.com/rsandor/gury), pronounced "jury", introduces some basic chaining, allowing you to build your canvas scenes and animate them in one expression.

#### Usage

To use Gury, reference the Gury script in your document's `<HEAD>` and add a `<canvas>` element with an DOM Id to your page. Use the `$g` function to operate on your canvas to set size and colors, add objects, and finally call `draw()`.

    $(function() {
      // Get the canvas as a gury object
      $g('screen')
        
        // set its size,
        .size(256, 256)
        
        // and background color
        .background('#111')
        
        // Now add a simple function that draws a diagonal line
        .add(function(ctx) {
          ctx.strokeStyle = '#f00';
          ctx.beginPath();
          ctx.moveTo(10, 10);
          ctx.lineTo(246, 246);
          ctx.stroke();
        })
        
        // Draw the scene's objects onto the canvas
        .draw()

    });

#### Animation

Gury also handles animation. Simply call `play()` passing in the refresh interval in milliseconds.

    $(function() {
      // Get the canvas as a gury object
      $g('screen')
        
        // set its size,
        .size(256, 256)
        
        // and background color
        .background('#111')
        
        // Add a more complicated animated object
        .add({
          x: 20, y: 20, dx: 1, dy: 2, s: 10,
          draw: function(ctx) {
            ctx.fillStyle = "#0ff";
            ctx.fillRect(this.x, this.y, this.s, this.s);
          
            this.x += this.dx;
            if (this.x >= 246 || this.x <= 10) {
              this.dx *= -1;
            }
            this.y += this.dy;
            if (this.y >= 246 || this.y <= 10) {
              this.dy *= -1;
            }
          }
        })
        
        // Draw the scene's objects onto the canvas
        .draw()
        
        // And finally begin playing the animation!
        .play(16);
    });

Ryan has some excellent demos in the repository, including this simple [color matching puzzle](http://github.com/rsandor/gury/blob/master/demo4.html):

[![Demo screenshot](http://cl.ly/88082066fe5997298c5c/content)](http://github.com/rsandor/gury/blob/master/demos/demo4.html)


[[Source on GitHub](http://github.com/rsandor/gury)]
