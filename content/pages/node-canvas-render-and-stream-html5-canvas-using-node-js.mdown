Date: 2010-11-05 19:51:00 GMT
tumblr_id: 1489735759
categories: github,node,javascript,canvas,html5,node.js
github_repo: learnboost/node-canvas
title: node-canvas: Render and stream HTML5 Canvas using Node.js

# node-canvas: Render and stream HTML5 Canvas using Node.js

You knew with [TJ Holowaychuk](http://tjholowaychuk.com/) joining the team, the already crazy amount of Node goodness from the bright folks over at [LearnBoost](http://learnboost.com) would only get better.

Today, they're taking the wraps off of [Node Canvas](https://github.com/learnboost/node-canvas), a server-side implementation of the HTML5 `<canvas>`. Node Canvas uses the [Cairo](http://cairographics.org/) library to render Canvas objects and then streams them back to the browser as PNGs.

Like all things Node these days, install using [npm](http://npmjs.org)

    npm install canvas

You can then create Canvas objects with the familiar API.


    /**
     * Module dependencies.
     */

    var Canvas = require('canvas')
      , canvas = new Canvas(150, 150)
      , ctx = canvas.getContext('2d')
      , fs = require('fs');

    ctx.fillRect(0,0,150,150);   // Draw a rectangle with default settings
    ctx.save();                  // Save the default state

    ctx.fillStyle = '#09F'       // Make changes to the settings
    ctx.fillRect(15,15,120,120); // Draw a rectangle with new settings

    ctx.save();                  // Save the current state
    ctx.fillStyle = '#FFF'       // Make changes to the settings
    ctx.globalAlpha = 0.5;    
    ctx.fillRect(30,30,90,90);   // Draw a rectangle with new settings

    ctx.restore();               // Restore previous state
    ctx.fillRect(45,45,60,60);   // Draw a rectangle with restored settings

    ctx.restore();               // Restore original state
    ctx.fillRect(60,60,30,30);   // Draw a rectangle with restored settings

Now the whole point is to stream it back to the browser:

    var out = fs.createWriteStream(__dirname + '/state.png')
      , stream = canvas.createPNGStream();

    stream.on('data', function(chunk){
      out.write(chunk);
    });

There are great examples in the test suite as well as a side-by-side comparison of [Flot](http://code.google.com/p/flot/) vs. node-canvas:

<img src="http://img.skitch.com/20101104-qc17pw415siacm947pcfnrften.png" width="500" alt="screenshot" />

Be sure and catch TJs introductory [screencast](http://screenr.com/CTk):



<object classid='clsid:d27cdb6e-ae6d-11cf-96b8-444553540000' codebase='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,115,0' width='560' height='345'><param name='movie' value='http://screenr.com/Content/assets/screenr_1116090935.swf' /><param name='flashvars' value='i=126869' /><param name='allowFullScreen' value='true' /><embed src='http://screenr.com/Content/assets/screenr_1116090935.swf' flashvars='i=126869' allowFullScreen='true' width='560' height='345' pluginspage='http://www.macromedia.com/go/getflashplayer'></embed></object>

LearnBoost is the company behind [Socket.io](http://socket.io). Be sure and catch [Episode 0.3.1](http://thechangelog.com/post/927103350/episode-0-3-1-websockets) on Websockets if you missed it.

[[Source on GitHub](http://github.com/learnboost/node-canvas)] [[Blog post](http://www.learnboost.com/introducing-node-canvas-server-side-html5-canvas-api/)]
