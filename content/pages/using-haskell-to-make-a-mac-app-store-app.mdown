Date: 2011-01-07 19:56:00 GMT
tumblr_id: 2639981126
categories: github,haskell,mac,app-store
github_repo: nfjinjing/haskell-cocoa-currency-converter-example
title: Using Haskell to make a Mac App Store App

# Using Haskell to make a Mac App Store App

<a href="http://www.apple.com/mac/app-store/"><img src="http://cl.ly/0W0g2z182X2t2p0Z3U3Z/app-store.png" alt="app-store.png" /></a>

Now that the [Mac App store](http://www.apple.com/mac/app-store/) is open, everyone is wondering what they can get away with. Apple has added some interesting restrictions that applications must be compiled with XCode. There are tons of languages for which this is not exactly normal, and so people have been curious to see what kinds of things will actually make it in. In particular, the Ruby community has been pretty excited about building apps with [MacRuby](http://thechangelog.com/tagged/MacRuby), since it fits the bill.

Well, I just heard about another oddball case, and it's been successful: [Jinjing Wang](https://github.com/nfjinjing) created an application called [ClippingDetector](http://itunes.apple.com/us/app/clippingdetector/id412382707?mt=12), and he's made [a GitHub repo](https://github.com/nfjinjing/haskell-cocoa-currency-converter-example) showing how he did it. Now, this isn't the code for the ClippingDetector app itself, it's Apple's famed Currency Converter example. However, it does show how to use XCode together with a custom Python script that makes all of the magic happen.

I'm excited to see all kinds of programming languages being used for desktop Mac development; while I enjoy Objective-C, sometimes it can be a bit unwieldy. It's also cool to have a real, working example of something when you're attempting to do something new and interesting.

[[Source on GitHub](https://github.com/nfjinjing/haskell-cocoa-currency-converter-example)] [[README](https://github.com/nfjinjing/haskell-cocoa-currency-converter-example/blob/master/readme.md)]
